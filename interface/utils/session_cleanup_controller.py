#!/usr/bin/env python3
"""
Sistema de controle de sess√£o otimizado - apenas para interface
Evita repeti√ß√µes desnecess√°rias de salvamento e limpeza
"""

import streamlit as st
import time
import threading
from datetime import datetime

class SessionCleanupController:
    """Controlador √∫nico para salvamento e limpeza por sess√£o"""
    
    def __init__(self):
        self.cleanup_executed = False
        self.user_id = None
        self.is_monitoring = False
    
    def should_execute_cleanup(self, current_user_id):
        """Verifica se deve executar cleanup para este usu√°rio"""
        
        # Se mudou de usu√°rio, resetar controle
        if self.user_id != current_user_id:
            self.cleanup_executed = False
            self.user_id = current_user_id
            
        return not self.cleanup_executed
    
    def execute_session_cleanup(self, force=False):
        """
        Executa salvamento + limpeza filtrada UMA √öNICA VEZ por sess√£o
        
        Args:
            force: Se True, for√ßa execu√ß√£o mesmo se j√° foi feita
        """
        
        current_user = st.session_state.get("id_client")
        
        if not current_user:
            print("‚ö†Ô∏è [CLEANUP] Nenhum usu√°rio identificado")
            return False
            
        # Verifica se j√° foi executado para este usu√°rio
        if not force and not self.should_execute_cleanup(current_user):
            print(f"‚úÖ [CLEANUP] J√° executado para usu√°rio {current_user}")
            return True
            
        print(f"üîÑ [CLEANUP] Iniciando para usu√°rio {current_user}")
        
        try:
            # SOLU√á√ÉO CORRETA: limpar_data_training j√° faz salvamento + limpeza
            success = self._smart_cleanup(current_user)
            
            if success:
                self.cleanup_executed = True
                print(f"‚úÖ [CLEANUP] Conclu√≠do para usu√°rio {current_user}")
                return True
            else:
                print(f"‚ùå [CLEANUP] Falha para usu√°rio {current_user}")
                return False
                
        except Exception as e:
            print(f"‚ùå [CLEANUP] Erro: {e}")
            return False
    
    def _smart_cleanup(self, user_id):
        """
        Limpeza inteligente que usa a fun√ß√£o correta do vanna_core
        Esta fun√ß√£o J√Å FAZ o salvamento antes da limpeza
        """
        try:
            if not hasattr(st.session_state, 'vanna') or not st.session_state.vanna:
                print("‚ö†Ô∏è [SMART_CLEAN] Vanna n√£o dispon√≠vel")
                return True
                
            # Configura path para vanna_core
            import sys
            import os
            src_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'src'))
            if src_path not in sys.path:
                sys.path.append(src_path)
                
            # Usa a fun√ß√£o correta que J√Å FAZ salvamento + limpeza
            from vanna_core import limpar_data_training
            
            vanna = st.session_state.vanna
            
            print(f"üß† [SMART_CLEAN] Executando limpeza inteligente para usu√°rio {user_id}")
            print("üìã [SMART_CLEAN] Esta fun√ß√£o automaticamente:")
            print("   1. Salva dados filtrados do usu√°rio")
            print("   2. Remove apenas dados adicionados na sess√£o")
            print("   3. Preserva backup original")
            
            # A fun√ß√£o limpar_data_training j√° faz tudo automaticamente
            limpar_data_training(vanna, user_id)
            
            print(f"‚úÖ [SMART_CLEAN] Limpeza inteligente conclu√≠da para usu√°rio {user_id}")
            return True
            
        except Exception as e:
            print(f"‚ùå [SMART_CLEAN] Erro na limpeza inteligente: {e}")
            return False
    
    def start_session_monitor(self):
        """Inicia monitor leve de sess√£o (apenas para encerramento inesperado)"""
        if self.is_monitoring:
            return
            
        self.is_monitoring = True
        monitor_thread = threading.Thread(target=self._monitor_session, daemon=True)
        monitor_thread.start()
        print("üîç [MONITOR] Monitor de sess√£o iniciado")
    
    def _monitor_session(self):
        """Monitor leve - verifica apenas a cada 10 segundos"""
        last_check = time.time()
        
        while self.is_monitoring:
            try:
                time.sleep(10)  # Verifica a cada 10s (menos frequente)
                
                # Verifica se sess√£o ainda existe
                if not self._session_still_active():
                    print("üö® [MONITOR] Sess√£o encerrada inesperadamente")
                    self._emergency_cleanup()
                    break
                    
                last_check = time.time()
                
            except Exception as e:
                print(f"‚ö†Ô∏è [MONITOR] Erro no monitoramento: {e}")
                self._emergency_cleanup()
                break
    
    def _session_still_active(self):
        """Verifica se a sess√£o ainda est√° ativa"""
        try:
            return (hasattr(st, 'session_state') and 
                   st.session_state and 
                   st.session_state.get("logado", False))
        except:
            return False
    
    def _emergency_cleanup(self):
        """Cleanup de emerg√™ncia para encerramento inesperado"""
        try:
            user_id = getattr(st.session_state, 'id_client', None) if hasattr(st, 'session_state') else None
            
            if user_id:
                print(f"üö® [EMERGENCY] Cleanup para usu√°rio {user_id}")
                self.execute_session_cleanup(force=True)
            
            self.is_monitoring = False
            
        except Exception as e:
            print(f"‚ùå [EMERGENCY] Erro cr√≠tico: {e}")

# Inst√¢ncia global do controlador
session_controller = SessionCleanupController()

def register_session_cleanup():
    """
    Registra sistema de cleanup otimizado (CHAME APENAS UMA VEZ)
    """
    if st.session_state.get("cleanup_system_registered"):
        return
        
    import atexit
    
    # Registra cleanup para encerramento normal
    atexit.register(lambda: session_controller.execute_session_cleanup(force=False))
    
    # Inicia monitor leve
    session_controller.start_session_monitor()
    
    st.session_state.cleanup_system_registered = True
    print("üîß [INIT] Sistema de cleanup otimizado registrado")

def execute_logout_cleanup():
    """
    Executa cleanup no logout (CHAME NO LOGOUT)
    """
    user_id = st.session_state.get("id_client")
    
    if not user_id:
        print("‚ö†Ô∏è [LOGOUT] Nenhum usu√°rio para cleanup")
        return False
    
    # Salva hist√≥rico de chat
    try:
        from auth.auth_utils import salvar_historico_chat_pickle
        salvar_historico_chat_pickle()
        print("üíæ [LOGOUT] Hist√≥rico salvo")
    except Exception as e:
        print(f"‚ö†Ô∏è [LOGOUT] Erro ao salvar hist√≥rico: {e}")
    
    # Executa salvamento + limpeza filtrada
    success = session_controller.execute_session_cleanup(force=False)
    
    if success:
        print(f"‚úÖ [LOGOUT] Cleanup completo para usu√°rio {user_id}")
    else:
        print(f"‚ùå [LOGOUT] Falha no cleanup para usu√°rio {user_id}")
    
    return success

def execute_user_change_cleanup(old_user_id, new_user_id):
    """
    Executa cleanup na mudan√ßa de usu√°rio (CHAME NA MUDAN√áA)
    """
    if old_user_id == new_user_id:
        return True
        
    print(f"üë§ [USER_CHANGE] {old_user_id} ‚Üí {new_user_id}")
    
    # Executa cleanup para usu√°rio anterior
    if old_user_id:
        # Temporariamente define o usu√°rio anterior para cleanup
        temp_user = st.session_state.get("id_client")
        st.session_state.id_client = old_user_id
        
        success = session_controller.execute_session_cleanup(force=False)
        
        # Restaura usu√°rio atual
        st.session_state.id_client = temp_user
        
        if success:
            print(f"‚úÖ [USER_CHANGE] Cleanup do usu√°rio anterior {old_user_id}")
        else:
            print(f"‚ùå [USER_CHANGE] Falha no cleanup do usu√°rio {old_user_id}")
        
        return success
    
    return True

def force_manual_cleanup():
    """
    For√ßa cleanup manual (PARA TESTES OU ENCERRAMENTO MANUAL)
    """
    user_id = st.session_state.get("id_client")
    
    print(f"üîß [MANUAL] For√ßando cleanup para usu√°rio {user_id}")
    
    success = session_controller.execute_session_cleanup(force=True)
    
    if success:
        print(f"‚úÖ [MANUAL] Cleanup for√ßado conclu√≠do")
    else:
        print(f"‚ùå [MANUAL] Falha no cleanup for√ßado")
    
    return success

def get_cleanup_status():
    """
    Retorna status atual do sistema de cleanup
    """
    return {
        "cleanup_executed": session_controller.cleanup_executed,
        "current_user": session_controller.user_id,
        "is_monitoring": session_controller.is_monitoring,
        "system_registered": st.session_state.get("cleanup_system_registered", False)
    }

# Exemplo de uso na interface:
"""
# NO app.py main():
from session_cleanup_controller import register_session_cleanup

def main():
    # Registra sistema APENAS UMA VEZ
    register_session_cleanup()
    
    # ...resto do c√≥digo...

# NO auth_utils.py logout():
from session_cleanup_controller import execute_logout_cleanup

def logout():
    execute_logout_cleanup()  # Em vez de m√∫ltiplas limpezas
    # ...resto do logout...

# PARA mudan√ßa de usu√°rio:
from session_cleanup_controller import execute_user_change_cleanup

if "last_user" in st.session_state and st.session_state.last_user != current_user:
    execute_user_change_cleanup(st.session_state.last_user, current_user)
st.session_state.last_user = current_user
"""
